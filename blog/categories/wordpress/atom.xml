<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Wordpress | From Shakespeare to Java]]></title>
  <link href="http://LCBecker.github.io/blog/categories/wordpress/atom.xml" rel="self"/>
  <link href="http://LCBecker.github.io/"/>
  <updated>2019-10-24T21:35:48-04:00</updated>
  <id>http://LCBecker.github.io/</id>
  <author>
    <name><![CDATA[Lori Becker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a WordPress Plugin Settings Page]]></title>
    <link href="http://LCBecker.github.io/blog/2014/08/13/creating-a-wordpress-plugin-settings-page/"/>
    <updated>2014-08-13T14:41:18-04:00</updated>
    <id>http://LCBecker.github.io/blog/2014/08/13/creating-a-wordpress-plugin-settings-page</id>
    <content type="html"><![CDATA[<p>In my last <a href="http://lcbecker.github.io/blog/2014/08/12/wordpress-short-codes-for-dummies/">post</a>, I showed you how to make a WordPress short code plugin. In this post, I&rsquo;ll build upon that short code and teach you how to make a simple settings page.</p>

<h3>A Little Backstory</h3>

<p>I found the resources currently available on the web on plugin settings pages extremely frustrating and convoluted for someone&rsquo;s first foray into WordPress development. I was continually pointed to <a href="http://ottopress.com/2009/wordpress-settings-api-tutorial/">Otto&rsquo;s tutorial</a>. Otto&rsquo;s tutorial works. It just isn&rsquo;t clear to beginners why it works or how to modify it for your own purposes. I believe it&rsquo;s always nice just to see a simple tutorial on how to create a plugin settings page before you start introducing how to do all the bells and whistles that can be implemented. This is the only <a href="http://code.tutsplus.com/articles/how-to-integrate-an-options-page-into-your-wordpress-theme--net-11847">site</a> I found that really helped me understand how to create a settings page, and it&rsquo;s to create custom settings for themes. Still, I was able to use it to make a nice, working plugin settings page and for that, I am extremely grateful! My tutorial is to teach you what I&rsquo;ve learned in hopes that you will struggle less than I did.</p>

<h3>Getting Started: Creating The Settings Menu and Page</h3>

<p>There two things we need to do. 1. Add a submenu to the admin page. Our settings page will be found under Settings -> Signature Plugin Settings after all is said and done. 2. Create the settings page itself. Since we&rsquo;re building upon the Signature plugin from my last post, you can add all of the following code right into that same PHP file, directly under the <code>add_shortcode</code> call.</p>

<p>So, let&rsquo;s add a submenu and begin creating our settings page:</p>

<pre><code>add_action('admin_menu', 'sig_admin_add_page');

function sig_admin_add_page() {
    add_options_page('Signature Plugin Settings', 'Signature Plugin Settings', 'manage_options', 'sig-plugin', 'sig_contents');
}
</code></pre>

<p>What does all this code mean/do? Well, the first line tells WordPress to add a submenu to the admin page and to create it using the <code>sig_admin_add_page</code> function. This function calls the <code>add_options_page</code> method which sets the text to be displayed in the menu, the page title for your settings page, the level of capability needed by the user in order to even see this menu option, the slug (end of URL) for the settings page, and finally, the function to call to generate the content of your settings page.</p>

<h3>Creating Your Setting Page&rsquo;s Content</h3>

<p>Remember how the signature&rsquo;s default first name was &ldquo;Firstname&rdquo; and the last name was &ldquo;Lastname&rdquo;? What if we could let the user set the defaults using a plugin settings page? In order to set the first and last name defaults, we need a form where the user can type in what they want and then save what the user types in. Saving the user input requires us to use the WordPress database. So, we&rsquo;ll do a POST to our form when the user clicks the Save Changes button. If a POST occurs (which it should), it will call another function, <code>sig_options_update()</code> to save the values to the WordPress database. Let&rsquo;s see what this all looks like:</p>

<pre><code>function sig_contents() {

    if ( $_POST['update_sigoptions'] == 'true' ) {
        sig_options_update();
    }
    ?&gt;

    &lt;div class="wrap"&gt;
    &lt;h2&gt; Signature Plugin Settings &lt;/h2&gt;
    &lt;form action="" method="POST"&gt;
        &lt;input type="hidden" name="update_sigoptions" value="true" /&gt;
    &lt;h4&gt; Change the default first and last name used: &lt;/h4&gt;
    &lt;table&gt;
    &lt;tr&gt;
    &lt;td&gt;&lt;label for='firstname'&gt; First name: &lt;/label&gt;&lt;/td&gt;
    &lt;td&gt;&lt;input id='firstname' name='first' size='40' type='text' value='&lt;?php echo get_option("first_name"); ?&gt;' /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tr&gt;
    &lt;td&gt;&lt;label for='lastname'&gt; Last name: &lt;/label&gt;&lt;/td&gt;
    &lt;td&gt;&lt;input id='lastname' name='last' size='40' type='text' value='&lt;?php echo get_option("last_name"); ?&gt;' /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/table&gt;
    &lt;br&gt;
    &lt;p&gt;&lt;?php if (!empty($_POST['first])) { echo '&lt;h4 style="text-align:center;"&gt; The first and last name that will be used as the default signature is: ' . $_POST["first"] . " " . $_POST["last"] . '&lt;/h4&gt;'; } ?&gt;&lt;/p&gt;
        &lt;?php submit_button() ?&gt;
    &lt;/form&gt;
&lt;/div&gt;
&lt;?php
}

function sig_options_update() {
    update_option('first_name', $_POST['first']);
    update_option('last_name', $_POST['last']);
}
</code></pre>

<p>Phew, that was a lot of code, but it&rsquo;s all easy stuff. We&rsquo;re simply providing input boxes for the first and last names, then saving those values in the database once a POST has been called via the submit button.</p>

<p>Now that we can set default values for the first and last names and save them in the WordPress database, we need to use those values! And so we must modify our code for our plugin that we wrote earlier.</p>

<h3>Modifying The Signature Plugin</h3>

<h5>If you&rsquo;re not using attributes</h5>

<p>To use our saved database values, all we need to do is modify the <code>add_signature()</code> function, like so:</p>

<pre><code>function add_signature() {

    // Gets values from the WordPress database.
    $first = get_option('first_name');
    $last = get_option('last_name');

    // If we don't have something saved in the database for the first name, we need to give it some value…in this case, "Firstname".
    if (empty($first)) {
        $first = "Firstname";
    }

    if (empty($last)) {
        $last = "Lastname";
    }

    return '&lt;p&gt; Sincerely, ' . $first . ' ' . $last '&lt;/p&gt;';
}
</code></pre>

<p>After adding this new code, you&rsquo;ll need to rezip and install your updated plugin into WordPress. If you&rsquo;re using WordPress locally through something like XAMPP, just copy the updated PHP file into wordpress/wp-content/plugins/signature folder you made previously.</p>

<h5>If you are using attributes</h5>

<p>This may be some ugly code (sorry!), but we need it in order to check for certain conditions. Are there default values stored in the database? If not, we need to provide something. Were there attributes? If so, let&rsquo;s use those instead. So, our new <code>add_atts</code> function looks like this:</p>

<pre><code>function add_atts($first, $last) {
    $name1;
    $name2;

    // Gets values from the WordPress database.
    $data_first = get_option('first_name');
    $data_last = get_option('last_name');

    if (empty($first)) { // If no first name attribute was provided
        if (empty($data_first)) { // If no  default first name is saved in the database
            $name1 = "Firstname"; // Firstname = "Firstname"
        } else {
            $name1 = $data_first; // If a default first name is saved, use it.
        }
    } else {
        $name1 = $first; // If a first name attribute was provided, use it.
    }

    if (empty($last)) {
        if (empty($data_last)) {
            $name2 = "Lastname";
        } else {
            $name2 = $data_last;
        }
    } else {
        $name2 = $last;
    }

    return $name1 . " " . $name2;
}
</code></pre>

<p>After adding this new code, you&rsquo;ll need to rezip and install your updated plugin into WordPress. If you&rsquo;re using WordPress locally through something like XAMPP, just copy the updated PHP file into wordpress/wp-content/plugins/signature folder you made previously.</p>

<h3>Testing And Troubleshooting</h3>

<p>When I first made a WordPress plugin, I got an error when I installed and activated it…a warning about headings appeared. If this is your first time making a plugin and you&rsquo;re not familiar with coding in PHP, you might not know that leaving spaces after the end of a block of PHP code creates this odd heading error in WordPress. Just make sure that there is no extra line or lines after the <code>?&gt;</code> at the end of your file. This should clear that error up.</p>

<p>Second, you might want to dive into the WordPress database and see for yourself if you&rsquo;ve set the <code>first_name</code> and <code>last_name</code> options! Since we didn&rsquo;t use arrays to save our values, you can actually see them (values saved in an array show up as SERIALIZED…not very helpful). Login to WordPress and after wp-admin/ add options.php. This shows you every value saved in the WordPress database. If you haven&rsquo;t played around with your settings page yet, <code>first_name</code> and <code>last_name</code> won&rsquo;t be in there. But if you have, they will be there in the list as well as their associated values.</p>

<h3>Final Thoughts</h3>

<p>Now you know how to make a short code plugin (with or without attributes) and a settings page for it that saves values in the WordPress database. I&rsquo;ve tried to show you how to do this as simply as possible with descriptions that explain exactly what we&rsquo;re doing and why. Hopefully, you can now use this knowledge to create your own plugin and have it do what you want. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPress Short Codes for Dummies]]></title>
    <link href="http://LCBecker.github.io/blog/2014/08/12/wordpress-short-codes-for-dummies/"/>
    <updated>2014-08-12T08:17:27-04:00</updated>
    <id>http://LCBecker.github.io/blog/2014/08/12/wordpress-short-codes-for-dummies</id>
    <content type="html"><![CDATA[<p>My most recent project as a junior developer intern was to create a WordPress short code and an admin settings page for it. I thought WordPress was supposed to be simple to work with, but as I found out, the resources out there on the subject of short codes and creating settings pages are quite murky if you&rsquo;ve never done WordPress development before. So, in this post, I&rsquo;ll teach you the basics of making a short code plugin.</p>

<h3>Create A Short Code</h3>

<p>The first thing you need to know about making a short code plugin is that WordPress requires a commented heading at the very top of the file and uses it to display information about your plugin when you install/activate it. For this short tutorial, let&rsquo;s say you want to add a signature to the end of your posts, just a nice little &ldquo;Sincerely, Firstname Lastname&rdquo; for a personalized touch. So, create a new PHP file and create the heading:</p>

<pre><code>&lt;?php
/*
Plugin Name: Signature    
Plugin URI: http://ifyouhaveone.com
Description: Adds a simple signature to your posts and pages.
Version: 1.0
Author: YOU!
Author URI: http://ifyouhaveone.com
License: GPL or None or Whatever
*/
</code></pre>

<p>Now, we create the HTML to add a signature by adding a PHP function in our new file with the nice heading:</p>

<pre><code>function add_signature() {
    return '&lt;p&gt; Sincerely, Firstname Lastname &lt;/p&gt;';
}
</code></pre>

<p>Wow, that was simple. Good. Next, we initialize the short code that will execute this function by calling the WordPress function <code>add_shortcode</code>. This function requires two parameters. The first one is what will be what you want users to type inside short code brackets to run your code. The second is the function to call to actually add the signature. Like so:</p>

<pre><code>add_shortcode('sig', 'add_signature');
</code></pre>

<p>In this case, typing <code>[sig]</code> on a WordPress post or page will add our signature by calling the <code>add_signature</code> function we just wrote.</p>

<p>Your plugin is almost ready! Feeling adventurous? Want to learn how to make this short code take attributes? Then click <a href="#attr">here</a>.</p>

<p>Otherwise, you probably want to see your plugin in action, just to check if I&rsquo;m totally off my rocker and leading you astray. So, let&rsquo;s finalize our PHP file by adding <code>?&gt;</code> on the very last line. Finally, zip your PHP file in your file manager or via command line for you fancy people out there.</p>

<h3><span id="install">Installing Your Short Code</span></h3>

<p>Log into your WordPress account. From the left-hand menu, select Plugins &ndash;> Add New. Under the Install Plugins header, click on Upload. Click on Choose File, find your zipped short code file on your system, then click install now. If you have the ability to activate your short code after successful installation, do so. Otherwise, from the left-hand menu, select Plugins &ndash;> Installed Plugins. Find the Signature plugin and click Activate. Great! Now, you can use it!</p>

<p>If you are running WordPress locally (such as through XAMPP), the above directions will not work. In this case, simply copy your PHP file and paste it into your WordPress/wp-content/plugins folder. Then from your WordPress account, select Plugins &ndash;> Installed Plugins and activate it.</p>

<p>To use your new short code, simply add <code>[sig]</code> where you&rsquo;d like your signature to appear on a page or post. If you used attributes, you now know the other ways to customize your signature via the short code macro. Congrats!</p>

<h3><span id="attr">Adding Attributes To Your Short Code</span></h3>

<p>Attributes are a nice way to customize your plugin on the fly. For our example, let&rsquo;s say you don&rsquo;t always want your signature to simply be Firstname Lastname. What if you could change that within each post, depending on your mood? Well you can&ndash;with attributes!</p>

<p>In order to allow and get attributes, we need to modify our <code>add_signature</code> function. We need our function to take in an <code>$atts</code> parameter and extract from it some attributes. In our case, we probably want to set the first and last name that&rsquo;s displayed. So, we&rsquo;ll do that by adding attributes to our short code and processing them in a new function we&rsquo;ll call <code>add_atts</code>.</p>

<p>Let&rsquo;s take a look at our new and improved <code>add_signature</code> function:</p>

<pre><code>function add_signature($atts) {
    extract(shortcode_atts(array(
        'first' =&gt; '',
        'last' =&gt; '',
    ), $atts));

    return '&lt;p&gt; Sincerely, ' . add_atts($first, $last) . '&lt;/p&gt;';
} 
</code></pre>

<p>Oh, nice! Inside the array, we declare each possible attribute we could set - either the first name(&lsquo;first&rsquo;) or the last name(&lsquo;last&rsquo;). These attributes can now be used as the variables <code>$first</code> and <code>$last</code>, which we pass as parameters to the function <code>add_atts</code>. Let&rsquo;s see what that function looks like:</p>

<pre><code>function add_atts($first, $last) {
    $name1;
    $name2;

    if (empty($first)) {
        $name1 = "Firstname";
    } else {
        $name1 = $first;
    }

    if (empty($last)) {
        $name2 = "Lastname";
    } else {
        $name2 = $last;
    }

    return $name1 . " " . $name2;
} 
</code></pre>

<p>What does this function do? Well, if we don&rsquo;t specify a first or last attribute in our short code, it will print a default value, in this case &ldquo;Firstname&rdquo; and &ldquo;Lastname&rdquo; respectively. If we specify one or both of them, our attribute values will show up. In other words,</p>

<ul>
<li><code>[sig]</code> will return Sincerely, Firstname Lastname</li>
<li><code>[sig first="Happy"]</code> will return Sincerely, Happy Lastname</li>
<li><code>[sig last="Gilmore"]</code> will return Sincerely, Firstname Gilmore</li>
<li><code>[sig first="Happy" last="Gilmore"]</code> will return Sincerely, Happy Gilmore</li>
</ul>


<p>Ahh, that&rsquo;s exactly what we wanted! And it&rsquo;s really rather simple! So, now it&rsquo;s time to install this plugin and get it up and running. So, let&rsquo;s finalize our PHP file by adding <code>?&gt;</code> on the very last line. Finally, zip your PHP file in your file manager or via command line for you fancy people out there. Now head over to <a href="#install">Installing Your Short Code</a>.</p>

<h3>Final Thoughts</h3>

<p>So now that you&rsquo;ve made a short code plugin, there&rsquo;s a few other things I should tell you. If you want to publish your plugin with WordPress Plugin Directory, you need a README file with much of the same information as the comments on the top of your PHP file. If you want more on creating short codes, I highly recommend <a href="http://www.smashingmagazine.com/2012/05/01/wordpress-shortcodes-complete-guide/">this site</a> for additional help.</p>

<p>Soon, I will show you how to create a plugin settings page. Stay tuned!</p>
]]></content>
  </entry>
  
</feed>
