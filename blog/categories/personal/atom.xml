<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Personal | From Shakespeare to Java]]></title>
  <link href="http://LCBecker.github.io/blog/categories/personal/atom.xml" rel="self"/>
  <link href="http://LCBecker.github.io/"/>
  <updated>2016-05-25T09:09:10-04:00</updated>
  <id>http://LCBecker.github.io/</id>
  <author>
    <name><![CDATA[Lori Becker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Year and a Half Later]]></title>
    <link href="http://LCBecker.github.io/blog/2015/01/28/a-year-and-a-half-later/"/>
    <updated>2015-01-28T16:02:00-05:00</updated>
    <id>http://LCBecker.github.io/blog/2015/01/28/a-year-and-a-half-later</id>
    <content type="html"><![CDATA[<p><img src="/images/comfortzone.jpg" alt="My favorite poster in Towne Building" /></p>

<p>I&rsquo;ve started my last course before I graduate in May. Of course, in typical Lori-fashion, I decided to take one of the hardest courses the computer science department at UPenn has to offer: CIS 555 - Internet and Web Systems. Why did I want to take such a hard course? Why not just breeze my way through some easier class instead? Because this class is a true test of all I&rsquo;ve learned in the past year and a half. It will turn all of the things I&rsquo;ve studied and make me apply them in challenging, new ways.</p>

<p>The first assignment is to build a web server from scratch. I have to write EVERYTHING. I can&rsquo;t even use Java&rsquo;s concurrent library to implement a thread pool. I have to do everything myself. That&rsquo;s why I&rsquo;m writing this blog post. Procrastinating? No, not at all. The first step is always to think it through. Make a plan. Then execute. I&rsquo;m in the thinking phase, slowly making a plan.</p>

<p>Which is why I decided to write this blog post. I couldn&rsquo;t help but think about how crazy it is that I&rsquo;m actually taking this class and doing this assignment. A year and a half ago, I didn&rsquo;t know how to program. I didn&rsquo;t know what a &ldquo;data structure&rdquo; was. I didn&rsquo;t know what an &ldquo;algorithm&rdquo; was. I didn&rsquo;t know what a web server was. The internet was MAGIC. Software was MAGIC. Sometimes, I like to think about all the people on their cell phones, tablets, and computers for leisure or business and how they know NOTHING about the work that went into every detail of that device, the OS, and the software they&rsquo;re running. And I do. I do know (sort of) what it takes to make what most people take for granted as they use their gadgets. It&rsquo;s unbelievably impressive! More impressive: I can do these things!</p>

<p>This is really a testament to how great Penn&rsquo;s program is. The kid gloves were off before I stepped into my first class. I wanted to learn computer science and I was (as) ready (as I could be) for the challenge. I was worried, though. Could my professors really teach a photographer/English teacher how to write code? Yes, and they did. There were times when I felt like I was drowning, but I kept kicking. I went to sleep and found myself coding in my dreams (good code, too! Code I could use when I woke up!).</p>

<p>For anyone who thinks they don&rsquo;t fit the mold (mould for you UKers) for a particulary area of study, who thinks they&rsquo;re too old to learn something completely new &ndash; you can. It takes some getting used to when you&rsquo;re out of your comfort zone. But that&rsquo;s how you grow. That&rsquo;s how I got to where I am now.</p>

<p>What a difference a year and a half can make.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Shakespeare to Java]]></title>
    <link href="http://LCBecker.github.io/blog/2014/10/08/from-shakespeare-to-java/"/>
    <updated>2014-10-08T21:56:58-04:00</updated>
    <id>http://LCBecker.github.io/blog/2014/10/08/from-shakespeare-to-java</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/engineeringbanner.jpg" title="&lsquo;Penn Engineering&rsquo; &lsquo;Penn Engineering&rsquo;" ></p>

<p>A little more than a ago, I was a high school English teacher. I walked around a classroom supervising activities to help my students grasp key concepts of reading, writing, and the &ldquo;collective human experience.&rdquo; And yes, I did teach Shakespeare (&lsquo;Romeo and Juliet&rsquo; and &lsquo;Hamlet&rsquo; to be exact).</p>

<p><strong>So how does a high school English teacher become a software engineer?</strong></p>

<p>Three events happened simultaneously back in April 2013. The first was hitting my 5 year mark as a teacher and not having a permanent position. For 5 years, I had worked in 6 school districts, but the positions were always temporary. School districts were receiving less funding from the state, causing districts to remove teaching positions in favor of larger class sizes. Other districts were laying off teachers in the thousands, causing massive competition for any permanent position out there. I was frustrated. I was a great teacher, I loved my subject, and I loved the profession. But the opportunities were drying up more and more every day and my future was frighteningly uncertain.</p>

<p>The second event had been mulling around for a while, but became a beacon of hope in April. My best friend kept telling me I&rsquo;d make a fantastic software developer. He tried to convince me that computer science <em>is</em> a creative endeavor. He pointed out that I love puzzles (it&rsquo;s true - I do crosswords and logic puzzles on my smartphone all the time) and that writing code is like solving puzzles all day. The more he talked about it, the more interested I became. I considered teaching myself how to code using online resources or attending coding workshops, but then…</p>

<p>My best friend talked to one of his co-workers, who just happenend to have been an English major who went through the MCIT program at the University of Pennsylvania and received a Masters in computer science. It turned out the MCIT program was one of the few in the country that would take students from other disciplines and teach them all the fundamentals of computer science (and then some). After I heard about MCIT, I was pretty convinced that this was an opportunity of a lifetime. I didn&rsquo;t really know if I was going to like programming. But sometimes other people see more in us than we can see in ourselves. So, I applied to the MCIT program…and got accepted!</p>

<p>Today, I know my best friend was right…perhaps too right. Programming is a creative process. It is a long string of puzzles (&ldquo;How do I make the computer do <em>this</em>?&rdquo;). It is challenging, rewarding, frustrating, and awesome all at the same time.</p>

<p>My experience transitioning from English teacher to software engineer (or as I like to say, from Shakespeare to Java) is why I am such an advocate for teaching others about the field of computer science. I think that despite our leaps forward in technology and that most of us use computers and smartphones daily, we are extremely disconnected from what makes all of our electronics&#8217; functionality possible. The younger generation has to actively seek out what computer science is, because it is rarely taught in the public school system. I hope that in the future, more people are at least somewhat knowledgable about programming, even if it is at a very basic level.</p>

<p>So what does the future hold for an English teacher turned software engineer? I don&rsquo;t know, but I can&rsquo;t wait to find out.</p>
]]></content>
  </entry>
  
</feed>
