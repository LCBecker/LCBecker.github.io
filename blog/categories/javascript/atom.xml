<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | From Shakespeare to Java]]></title>
  <link href="http://LCBecker.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://LCBecker.github.io/"/>
  <updated>2016-02-21T21:38:36-05:00</updated>
  <id>http://LCBecker.github.io/</id>
  <author>
    <name><![CDATA[Lori Becker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Interactive SVGs in AngularJS]]></title>
    <link href="http://LCBecker.github.io/blog/2015/12/18/interactive-svgs-in-angularjs/"/>
    <updated>2015-12-18T18:28:47-05:00</updated>
    <id>http://LCBecker.github.io/blog/2015/12/18/interactive-svgs-in-angularjs</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/dvorak.jpg" title="&lsquo;Dvorak keyboard&rsquo; &lsquo;Dvorak keyboard&rsquo;" ></p>

<p>My latest project has been utilizing my art degree (wait, what? An art degree is useful as a software engineer? Surprisingly, YES). Using Inkscape, I created a very customized keyboard as an SVG (Scalable Vector Graphic). There were two things I had to do with this file:</p>

<ol>
<li>Embed the SVG into a view inside my AngularJS application.</li>
<li>Each key element/node needed an <code>ng-click</code> attribute so when it was pressed, something would happen. Because, you know, what good is a key if you can&rsquo;t click on it?</li>
</ol>


<p>As I discovered, these two tasks are a lot harder than they should be. Putting an SVG into a view is as simple as making the file path the <code>data</code> of an <code>&lt;object&gt;</code> in the HTML. You can add an <code>ng-click</code> to the <code>&lt;object&gt;</code>, but that only works if you want the entire SVG to be clickable. I wanted interactivity <em>inside</em> the SVG itself. Adding <code>ng-click</code> as an attribute within a node in the SVG file will NOT work! To do what I wanted, I neede to use directives to embed the SVG in the view and attach a <code>ng-click</code> attribute to each of my keys.</p>

<p>I found <a href="" title="https://goo.gl/3s3Vlu">this site</a> that had an interactive map and thought, &ldquo;Hey, that&rsquo;s kind of similar to what I want to do!&rdquo; So, using their insights, I was able to make a clickable keyboard within my AngularJS application. Here&rsquo;s how I did it:</p>

<h3>Add A Class and Unique ID to SVG Nodes</h3>

<p>My keys were mainly circle elements with some text on top. I flattened my SVG to one layer to ensure that when a user clicked anywhere inside the circle element, it would trigger a click event. I added a class to each circle element and also updated the id of each circle element to reference its value, like so:</p>

<pre><code>&lt;circle
    r="43"
    cy="569"
    cx="227"
    style="fill:#4d4d4d;stroke:#000000;stroke-width:3"
    id="btn_MENU"
    class="boardKeys" /&gt;
</code></pre>

<h3>Make Two Directives</h3>

<p>I just put both directives in the same file: keyDirectives.js.</p>

<p>Directive One: Embed the SVG.</p>

<pre><code class="javascript">var myApp = angular.module('KeyboardAppModule');

myApp.directive('svgKeys', ['$compile', function($compile) {
    return {
        restrict: 'A',
        templateUrl: 'images/keyboard.svg',
        link: function(scope, element, attrs) {
            var keys = element[0].querySelectorAll('.boardKeys');
            angular.forEach(keys, function(path, key) {
            var myKey = angular.element(path);
            myKey.attr("myKey", "");
            $compile(myKey)(scope);
            })
        }
    }
}]);
</code></pre>

<p>Notice these details: <code>var keys</code> is an array of all elements with the class <code>boardKeys</code>&hellip;the same class I attached to each circle element (key) inside my SVG. For each of these circles, the directive adds the attribute <code>myKey</code> which is really the name of Directive Two. Directive Two is then initiated. But first, since I now have the directive that places the SVG into the view, take a look at the view&rsquo;s HTML:</p>

<pre><code class="html">    &lt;div class="row"&gt;
        &lt;div class="col-sm-8 col-sm-offset-2"&gt;
            &lt;div svgKeys&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
</code></pre>

<p>See how I just threw that directive in there? That&rsquo;ll just embed the SVG in that div! Woohoo! But wait, I still need to register clicking a key.</p>

<p>Directive Two: Add <code>ng-click</code> to all keys.</p>

<pre><code class="javascript">myApp.directive('myKey', ['$compile', function($compile) {
    return {
        restrict: 'A',
        scope: true,
        link: function (scope, element, attrs) {
            scope.elementId = element.attr("id");
            scope.keyClick = function() {
                scope.pressKey(scope.elementId);
            };
            element.attr("ng-click", "keyClick()");
            element.removeAttr("myKey");
            $compile(element)(scope);
        }
    }
}]);
</code></pre>

<p>So, Directive One added the <code>myKey</code> directive to each key, which then calls Directive Two, which adds the <code>ng-click</code> attribute to each key. For me, I used a function called <code>pressKey()</code> in my controller. It&rsquo;s accessible via scope and I felt that my controller is where someone would look to see what happens when a button is clicked. You could just as well define what should happen when a key is clicked here in the directive. Also notice that I pass <code>scope.elementId</code> to my <code>pressKey</code> function. <code>scope.elementId</code> is the key&rsquo;s ID! So, now I know <em>which</em> key was clicked and can handle the case as needed!</p>

<h3>FIN</h3>

<p>It obviously doesn&rsquo;t take a lot of code to make an SVG file&rsquo;s elements interactive in Angular, but it&rsquo;s certainly not intuitive. Nonetheless, it&rsquo;s great that this code works and I&rsquo;m excited for my next Angular application with interactive SVGs!</p>
]]></content>
  </entry>
  
</feed>
